---
import { getCollection, type CollectionEntry } from "astro:content";
import BaseHead from "@components/BaseHead.astro";
import BaseHTML from "@layouts/BaseHTML.astro";
import { Picture } from "astro:assets";
import GitHub from "@components/decorations/Github.astro";
import FormattedDate from "@components/FormattedDate.astro";
import Tag from "@components/Tag.astro";
import ViewTransitionLimiter from "@components/svelte/ViewTransitionLimiter.svelte";
import { SITE_TITLE } from "@consts";
import type { MarkdownHeading } from "node_modules/astro/dist/@types/astro";
import TableOfContents from "@components/svelte/decorations/TableOfContents.svelte";
import Sidebar from "@components/Sidebar.astro";
import CenterContent from '@components/CenterContent.astro';
import ProjectRelationsSidebar from '@components/project/ProjectRelationsSidebar.astro'

// import val from '@content/project/contour/order.ts';

type Props = {
	minutesRead: string | undefined;
	slug: string;
	data: CollectionEntry<"project">["data"];
	headings: MarkdownHeading[];
};

const {
	minutesRead,
	slug,
	data,
	headings
} = Astro.props;

const aspectRatio =
	data.image.aspect === undefined ? "aspect-ratio: 2" : `aspect-ratio: ${data.image.aspect};`;


let projectRelated: { data: (CollectionEntry<'project'>)['data'], slug: string }[] = [];
let order: string[] = [];

if (data.project !== undefined) {
	projectRelated = (await getCollection("project")).filter((p) => p.data.project === data.project).flatMap((p) => { return{ data: p.data, slug: p.slug } } );
	try {
		const orderRaw = (await import(`../../../src/content/project/${data.project}/order.ts`)).default;
		if (orderRaw.length > 0) order = orderRaw as string[];

	} catch (e) {
		// No order file. Nothing to do.
	}
}



---

<!-- <style is:global>
	.highlight:last-of-type {
		background-color: #ff0000;
	}

	/* .highlight:not(:has(~ .highlight)) {
		background-color: #ff0000;
	} */
</style> -->

<BaseHTML>
	<BaseHead slot="header" title={data.title + ' | ' + SITE_TITLE} description={data.description} image={data.image.img.src} type="article" />
	<CenterContent>
		<ViewTransitionLimiter client:idle slug={slug}>
			<Picture formats={["avif", "webp"]} width={1260} src={data.image.img} style={aspectRatio} class="object-cover z-10" loading={"eager"} alt="Cover image" 
			/>
		</ViewTransitionLimiter>
		<div class="">
			<div class="title relative flex flex-row items-center">
				<div>
					<h1 id="overview" class="mb-2 text-xl xs:text-3xl sm:text-4xl scroll-m-96">{data.title}</h1>
					<div class="flex flex-row items-center gap-1 whitespace-nowrap">
						<FormattedDate date={data.pubDate} />
						<div class="hidden sm:inline-flex gap-1 items-center">{
							data.pubDate && (
								<span>•</span>
								<div class="text-xs italic">
									Updated <FormattedDate date={data.pubDate} />
								</div>
							)
						}</div>
						{minutesRead !== undefined ? <span>•</span><span class="text-xs italic">{minutesRead}</span> : ""}
						<div class="flex-grow"></div>
					</div>
					{data.tags && <div class="inline-flex gap-1 items-center overflow-x-scroll no-scrollbar">{ data.tags && data.tags.map((d) => <Tag tag={d}/>) }</div> }
				</div>
				<div class="flex-grow"></div>
				{data.repo !== undefined ? 
					<div class="">
						<GitHub repo={data.repo} />
					</div>
				: ""}
			</div>
			<hr class="py-0 mt-2 mb-2 border-neutral-200 dark:border-neutral-800" />
			<Sidebar side="left" class="md:bg-neutral-50 md:dark:bg-neutral-950">
				<ProjectRelationsSidebar relations={projectRelated} chapterOrder={order} slug={slug} />
			</Sidebar>
			<Sidebar side="right">
				<TableOfContents headings={headings} client:idle />
			</Sidebar>
			<slot />
		</div>
	<CenterContent/>
</BaseHTML>
